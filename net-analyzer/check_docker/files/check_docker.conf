object CheckCommand "check_docker" {
	command = [ PluginDir + "/check_docker.py" ]

	arguments = {
		"--connection" = {
			value = "$check_docker_connection$"
			description = "Where to find docker daemon socket. (default: /var/run/docker.sock)"
		}
		"--secure-connection" = {
			value = "$check_docker_secure_connection$"
			description = "Where to find TLS protected docker daemon socket."
		}
		"--binary_units" = {
			set_if = "$check_docker_binary_units$"
			description = "Use a base of 1024 when doing calculations of KB, MB, GB, & TB (This is default)"
		}
		"--decimal_units" = {
			set_if = "$check_docker_decimal_units$"
			description = "Use a base of 1000 when doing calculations of KB, MB, GB, & TB"
		}
		"--timeout" = {
			value = "$check_docker_timeout$"
			description = "Connection timeout in seconds. (default: 10.0)"
		}
		"--containers" = {
			value = "$check_docker_containers$"
			description = "One or more RegEx that match the names of the container(s) to check. If omitted all containers are checked. (default: ['all'])"
		}
		"--present" = {
			set_if = "$check_docker_present$"
			description = "Modifies --containers so that each RegEx must match at least one container."
		}
		"--threads" = {
			value = "$check_docker_threads$"
			description = "This + 1 is the maximum number of concurent threads/network connections. (default: 10)"
		}
		"--cpu" = {
			value = "$check_docker_cpu$"
			description = "Check cpu usage percentage taking into account any limits."
		}
		"--memory" = {
			value = "$check_docker_memory$"
			description = "Check memory usage taking into account any limits. Valid values for units are %,B,KB,MB,GB."
		}
		"--status" = {
			value = "$check_docker_status$"
			description = "Desired container status (running, exited, etc)."
		}
		"--health" = {
			set_if = "$check_docker_health$"
			description = "Check container's health check status."
		}
		"--uptime" = {
			value = "$check_docker_uptime$"
			description = "Minimum container uptime in seconds. Use when infrequent crashes are tolerated."
		}
		"--image-age" = {
			value = "$check_docker_image_age$"
			description = "Maximum image age in days."
		}
		"--version" = {
			set_if = "$check_docker_version$"
			description = "Check if the running images are the same version as those in the registry. Useful for finding stale images. Does not support login."
		}
		"--insecure-registries" = {
			value = "$check_docker_insecure_registries$"
			description = "List of registries to connect to with http(no TLS). Useful when using '--version' with images from insecure registries."
		}
		"--restarts" = {
			value = "$check_docker_restarts$"
			description = "Container restart thresholds."
		}
		"--no-ok" = {
			set_if = "$check_docker_no_ok$"
			description = "Make output terse suppressing OK messages. If all checks are OK return a single OK."
		}
		"--no-performance" = {
			set_if = "$check_docker_no_performance$"
			description = "Check if the running images are the same version as those in the registry. Useful for finding stale images. Does not support login."
		}
	}
}

object CheckCommand "by_ssh_check_docker" {
	import "check_docker"
	vars.by_ssh_arguments = arguments
	arguments = null
	vars.by_ssh_command = "$by_ssh_plugindir$/contrib/check_docker.py"
	import "by_ssh_base"
}

